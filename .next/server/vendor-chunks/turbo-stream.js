"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/turbo-stream";
exports.ids = ["vendor-chunks/turbo-stream"];
exports.modules = {

/***/ "(ssr)/./node_modules/turbo-stream/dist/flatten.js":
/*!***************************************************!*\
  !*** ./node_modules/turbo-stream/dist/flatten.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.flatten = void 0;\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/turbo-stream/dist/utils.js\");\nfunction flatten(input) {\n    const { indices } = this;\n    const existing = indices.get(input);\n    if (existing)\n        return [existing];\n    if (input === undefined)\n        return utils_js_1.UNDEFINED;\n    if (input === null)\n        return utils_js_1.NULL;\n    if (Number.isNaN(input))\n        return utils_js_1.NAN;\n    if (input === Number.POSITIVE_INFINITY)\n        return utils_js_1.POSITIVE_INFINITY;\n    if (input === Number.NEGATIVE_INFINITY)\n        return utils_js_1.NEGATIVE_INFINITY;\n    if (input === 0 && 1 / input < 0)\n        return utils_js_1.NEGATIVE_ZERO;\n    const index = this.index++;\n    indices.set(input, index);\n    stringify.call(this, input, index);\n    return index;\n}\nexports.flatten = flatten;\nfunction stringify(input, index) {\n    const { deferred, plugins, postPlugins } = this;\n    const str = this.stringified;\n    const stack = [[input, index]];\n    while (stack.length > 0) {\n        const [input, index] = stack.pop();\n        const partsForObj = (obj) => Object.keys(obj)\n            .map((k) => `\"_${flatten.call(this, k)}\":${flatten.call(this, obj[k])}`)\n            .join(\",\");\n        let error = null;\n        switch (typeof input) {\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                str[index] = JSON.stringify(input);\n                break;\n            case \"bigint\":\n                str[index] = `[\"${utils_js_1.TYPE_BIGINT}\",\"${input}\"]`;\n                break;\n            case \"symbol\": {\n                const keyFor = Symbol.keyFor(input);\n                if (!keyFor) {\n                    error = new Error(\"Cannot encode symbol unless created with Symbol.for()\");\n                }\n                else {\n                    str[index] = `[\"${utils_js_1.TYPE_SYMBOL}\",${JSON.stringify(keyFor)}]`;\n                }\n                break;\n            }\n            case \"object\": {\n                if (!input) {\n                    str[index] = `${utils_js_1.NULL}`;\n                    break;\n                }\n                const isArray = Array.isArray(input);\n                let pluginHandled = false;\n                if (!isArray && plugins) {\n                    for (const plugin of plugins) {\n                        const pluginResult = plugin(input);\n                        if (Array.isArray(pluginResult)) {\n                            pluginHandled = true;\n                            const [pluginIdentifier, ...rest] = pluginResult;\n                            str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                            if (rest.length > 0) {\n                                str[index] += `,${rest\n                                    .map((v) => flatten.call(this, v))\n                                    .join(\",\")}`;\n                            }\n                            str[index] += \"]\";\n                            break;\n                        }\n                    }\n                }\n                if (!pluginHandled) {\n                    let result = isArray ? \"[\" : \"{\";\n                    if (isArray) {\n                        for (let i = 0; i < input.length; i++)\n                            result +=\n                                (i ? \",\" : \"\") +\n                                    (i in input ? flatten.call(this, input[i]) : utils_js_1.HOLE);\n                        str[index] = `${result}]`;\n                    }\n                    else if (input instanceof Date) {\n                        str[index] = `[\"${utils_js_1.TYPE_DATE}\",${input.getTime()}]`;\n                    }\n                    else if (input instanceof URL) {\n                        str[index] = `[\"${utils_js_1.TYPE_URL}\",${JSON.stringify(input.href)}]`;\n                    }\n                    else if (input instanceof RegExp) {\n                        str[index] = `[\"${utils_js_1.TYPE_REGEXP}\",${JSON.stringify(input.source)},${JSON.stringify(input.flags)}]`;\n                    }\n                    else if (input instanceof Set) {\n                        if (input.size > 0) {\n                            str[index] = `[\"${utils_js_1.TYPE_SET}\",${[...input]\n                                .map((val) => flatten.call(this, val))\n                                .join(\",\")}]`;\n                        }\n                        else {\n                            str[index] = `[\"${utils_js_1.TYPE_SET}\"]`;\n                        }\n                    }\n                    else if (input instanceof Map) {\n                        if (input.size > 0) {\n                            str[index] = `[\"${utils_js_1.TYPE_MAP}\",${[...input]\n                                .flatMap(([k, v]) => [\n                                flatten.call(this, k),\n                                flatten.call(this, v),\n                            ])\n                                .join(\",\")}]`;\n                        }\n                        else {\n                            str[index] = `[\"${utils_js_1.TYPE_MAP}\"]`;\n                        }\n                    }\n                    else if (input instanceof Promise) {\n                        str[index] = `[\"${utils_js_1.TYPE_PROMISE}\",${index}]`;\n                        deferred[index] = input;\n                    }\n                    else if (input instanceof Error) {\n                        str[index] = `[\"${utils_js_1.TYPE_ERROR}\",${JSON.stringify(input.message)}`;\n                        if (input.name !== \"Error\") {\n                            str[index] += `,${JSON.stringify(input.name)}`;\n                        }\n                        str[index] += \"]\";\n                    }\n                    else if (Object.getPrototypeOf(input) === null) {\n                        str[index] = `[\"${utils_js_1.TYPE_NULL_OBJECT}\",{${partsForObj(input)}}]`;\n                    }\n                    else if (isPlainObject(input)) {\n                        str[index] = `{${partsForObj(input)}}`;\n                    }\n                    else {\n                        error = new Error(\"Cannot encode object with prototype\");\n                    }\n                }\n                break;\n            }\n            default: {\n                const isArray = Array.isArray(input);\n                let pluginHandled = false;\n                if (!isArray && plugins) {\n                    for (const plugin of plugins) {\n                        const pluginResult = plugin(input);\n                        if (Array.isArray(pluginResult)) {\n                            pluginHandled = true;\n                            const [pluginIdentifier, ...rest] = pluginResult;\n                            str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                            if (rest.length > 0) {\n                                str[index] += `,${rest\n                                    .map((v) => flatten.call(this, v))\n                                    .join(\",\")}`;\n                            }\n                            str[index] += \"]\";\n                            break;\n                        }\n                    }\n                }\n                if (!pluginHandled) {\n                    error = new Error(\"Cannot encode function or unexpected type\");\n                }\n            }\n        }\n        if (error) {\n            let pluginHandled = false;\n            if (postPlugins) {\n                for (const plugin of postPlugins) {\n                    const pluginResult = plugin(input);\n                    if (Array.isArray(pluginResult)) {\n                        pluginHandled = true;\n                        const [pluginIdentifier, ...rest] = pluginResult;\n                        str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                        if (rest.length > 0) {\n                            str[index] += `,${rest\n                                .map((v) => flatten.call(this, v))\n                                .join(\",\")}`;\n                        }\n                        str[index] += \"]\";\n                        break;\n                    }\n                }\n            }\n            if (!pluginHandled) {\n                throw error;\n            }\n        }\n    }\n}\nconst objectProtoNames = Object.getOwnPropertyNames(Object.prototype)\n    .sort()\n    .join(\"\\0\");\nfunction isPlainObject(thing) {\n    const proto = Object.getPrototypeOf(thing);\n    return (proto === Object.prototype ||\n        proto === null ||\n        Object.getOwnPropertyNames(proto).sort().join(\"\\0\") === objectProtoNames);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/turbo-stream/dist/flatten.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/turbo-stream/dist/turbo-stream.js":
/*!********************************************************!*\
  !*** ./node_modules/turbo-stream/dist/turbo-stream.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encode = exports.decode = void 0;\nconst flatten_js_1 = __webpack_require__(/*! ./flatten.js */ \"(ssr)/./node_modules/turbo-stream/dist/flatten.js\");\nconst unflatten_js_1 = __webpack_require__(/*! ./unflatten.js */ \"(ssr)/./node_modules/turbo-stream/dist/unflatten.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/turbo-stream/dist/utils.js\");\nasync function decode(readable, options) {\n    const { plugins } = options ?? {};\n    const done = new utils_js_1.Deferred();\n    const reader = readable\n        .pipeThrough((0, utils_js_1.createLineSplittingTransform)())\n        .getReader();\n    const decoder = {\n        values: [],\n        hydrated: [],\n        deferred: {},\n        plugins,\n    };\n    const decoded = await decodeInitial.call(decoder, reader);\n    let donePromise = done.promise;\n    if (decoded.done) {\n        done.resolve();\n    }\n    else {\n        donePromise = decodeDeferred\n            .call(decoder, reader)\n            .then(done.resolve)\n            .catch((reason) => {\n            for (const deferred of Object.values(decoder.deferred)) {\n                deferred.reject(reason);\n            }\n            done.reject(reason);\n        });\n    }\n    return {\n        done: donePromise.then(() => reader.closed),\n        value: decoded.value,\n    };\n}\nexports.decode = decode;\nasync function decodeInitial(reader) {\n    const read = await reader.read();\n    if (!read.value) {\n        throw new SyntaxError();\n    }\n    let line;\n    try {\n        line = JSON.parse(read.value);\n    }\n    catch (reason) {\n        throw new SyntaxError();\n    }\n    return {\n        done: read.done,\n        value: unflatten_js_1.unflatten.call(this, line),\n    };\n}\nasync function decodeDeferred(reader) {\n    let read = await reader.read();\n    while (!read.done) {\n        if (!read.value)\n            continue;\n        const line = read.value;\n        switch (line[0]) {\n            case utils_js_1.TYPE_PROMISE: {\n                const colonIndex = line.indexOf(\":\");\n                const deferredId = Number(line.slice(1, colonIndex));\n                const deferred = this.deferred[deferredId];\n                if (!deferred) {\n                    throw new Error(`Deferred ID ${deferredId} not found in stream`);\n                }\n                const lineData = line.slice(colonIndex + 1);\n                let jsonLine;\n                try {\n                    jsonLine = JSON.parse(lineData);\n                }\n                catch (reason) {\n                    throw new SyntaxError();\n                }\n                const value = unflatten_js_1.unflatten.call(this, jsonLine);\n                deferred.resolve(value);\n                break;\n            }\n            case utils_js_1.TYPE_ERROR: {\n                const colonIndex = line.indexOf(\":\");\n                const deferredId = Number(line.slice(1, colonIndex));\n                const deferred = this.deferred[deferredId];\n                if (!deferred) {\n                    throw new Error(`Deferred ID ${deferredId} not found in stream`);\n                }\n                const lineData = line.slice(colonIndex + 1);\n                let jsonLine;\n                try {\n                    jsonLine = JSON.parse(lineData);\n                }\n                catch (reason) {\n                    throw new SyntaxError();\n                }\n                const value = unflatten_js_1.unflatten.call(this, jsonLine);\n                deferred.reject(value);\n                break;\n            }\n            default:\n                throw new SyntaxError();\n        }\n        read = await reader.read();\n    }\n}\nfunction encode(input, options) {\n    const { plugins, postPlugins, signal } = options ?? {};\n    const encoder = {\n        deferred: {},\n        index: 0,\n        indices: new Map(),\n        stringified: [],\n        plugins,\n        postPlugins,\n        signal,\n    };\n    const textEncoder = new TextEncoder();\n    let lastSentIndex = 0;\n    const readable = new ReadableStream({\n        async start(controller) {\n            const id = flatten_js_1.flatten.call(encoder, input);\n            if (Array.isArray(id)) {\n                throw new Error(\"This should never happen\");\n            }\n            if (id < 0) {\n                controller.enqueue(textEncoder.encode(`${id}\\n`));\n            }\n            else {\n                controller.enqueue(textEncoder.encode(`[${encoder.stringified.join(\",\")}]\\n`));\n                lastSentIndex = encoder.stringified.length - 1;\n            }\n            const seenPromises = new WeakSet();\n            while (Object.keys(encoder.deferred).length > 0) {\n                for (const [deferredId, deferred] of Object.entries(encoder.deferred)) {\n                    if (seenPromises.has(deferred))\n                        continue;\n                    seenPromises.add((encoder.deferred[Number(deferredId)] = raceSignal(deferred, encoder.signal)\n                        .then((resolved) => {\n                        const id = flatten_js_1.flatten.call(encoder, resolved);\n                        if (Array.isArray(id)) {\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_PROMISE}${deferredId}:[[\"${utils_js_1.TYPE_PREVIOUS_RESOLVED}\",${id[0]}]]\\n`));\n                            encoder.index++;\n                            lastSentIndex++;\n                        }\n                        else if (id < 0) {\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_PROMISE}${deferredId}:${id}\\n`));\n                        }\n                        else {\n                            const values = encoder.stringified\n                                .slice(lastSentIndex + 1)\n                                .join(\",\");\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_PROMISE}${deferredId}:[${values}]\\n`));\n                            lastSentIndex = encoder.stringified.length - 1;\n                        }\n                    }, (reason) => {\n                        if (!reason ||\n                            typeof reason !== \"object\" ||\n                            !(reason instanceof Error)) {\n                            reason = new Error(\"An unknown error occurred\");\n                        }\n                        const id = flatten_js_1.flatten.call(encoder, reason);\n                        if (Array.isArray(id)) {\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_ERROR}${deferredId}:[[\"${utils_js_1.TYPE_PREVIOUS_RESOLVED}\",${id[0]}]]\\n`));\n                            encoder.index++;\n                            lastSentIndex++;\n                        }\n                        else if (id < 0) {\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_ERROR}${deferredId}:${id}\\n`));\n                        }\n                        else {\n                            const values = encoder.stringified\n                                .slice(lastSentIndex + 1)\n                                .join(\",\");\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_ERROR}${deferredId}:[${values}]\\n`));\n                            lastSentIndex = encoder.stringified.length - 1;\n                        }\n                    })\n                        .finally(() => {\n                        delete encoder.deferred[Number(deferredId)];\n                    })));\n                }\n                await Promise.race(Object.values(encoder.deferred));\n            }\n            await Promise.all(Object.values(encoder.deferred));\n            controller.close();\n        },\n    });\n    return readable;\n}\nexports.encode = encode;\nfunction raceSignal(promise, signal) {\n    if (!signal)\n        return promise;\n    if (signal.aborted)\n        return Promise.reject(signal.reason || new Error(\"Signal was aborted.\"));\n    const abort = new Promise((resolve, reject) => {\n        signal.addEventListener(\"abort\", (event) => {\n            reject(signal.reason || new Error(\"Signal was aborted.\"));\n        });\n        promise.then(resolve).catch(reject);\n    });\n    abort.catch(() => { });\n    return Promise.race([abort, promise]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/turbo-stream/dist/turbo-stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/turbo-stream/dist/unflatten.js":
/*!*****************************************************!*\
  !*** ./node_modules/turbo-stream/dist/unflatten.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unflatten = void 0;\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/turbo-stream/dist/utils.js\");\nconst globalObj = (typeof window !== \"undefined\"\n    ? window\n    : typeof globalThis !== \"undefined\"\n        ? globalThis\n        : undefined);\nfunction unflatten(parsed) {\n    const { hydrated, values } = this;\n    if (typeof parsed === \"number\")\n        return hydrate.call(this, parsed);\n    if (!Array.isArray(parsed) || !parsed.length)\n        throw new SyntaxError();\n    const startIndex = values.length;\n    for (const value of parsed) {\n        values.push(value);\n    }\n    hydrated.length = values.length;\n    return hydrate.call(this, startIndex);\n}\nexports.unflatten = unflatten;\nfunction hydrate(index) {\n    const { hydrated, values, deferred, plugins } = this;\n    let result;\n    const stack = [\n        [\n            index,\n            (v) => {\n                result = v;\n            },\n        ],\n    ];\n    let postRun = [];\n    while (stack.length > 0) {\n        const [index, set] = stack.pop();\n        switch (index) {\n            case utils_js_1.UNDEFINED:\n                set(undefined);\n                continue;\n            case utils_js_1.NULL:\n                set(null);\n                continue;\n            case utils_js_1.NAN:\n                set(NaN);\n                continue;\n            case utils_js_1.POSITIVE_INFINITY:\n                set(Infinity);\n                continue;\n            case utils_js_1.NEGATIVE_INFINITY:\n                set(-Infinity);\n                continue;\n            case utils_js_1.NEGATIVE_ZERO:\n                set(-0);\n                continue;\n        }\n        if (hydrated[index]) {\n            set(hydrated[index]);\n            continue;\n        }\n        const value = values[index];\n        if (!value || typeof value !== \"object\") {\n            hydrated[index] = value;\n            set(value);\n            continue;\n        }\n        if (Array.isArray(value)) {\n            if (typeof value[0] === \"string\") {\n                const [type, b, c] = value;\n                switch (type) {\n                    case utils_js_1.TYPE_DATE:\n                        set((hydrated[index] = new Date(b)));\n                        continue;\n                    case utils_js_1.TYPE_URL:\n                        set((hydrated[index] = new URL(b)));\n                        continue;\n                    case utils_js_1.TYPE_BIGINT:\n                        set((hydrated[index] = BigInt(b)));\n                        continue;\n                    case utils_js_1.TYPE_REGEXP:\n                        set((hydrated[index] = new RegExp(b, c)));\n                        continue;\n                    case utils_js_1.TYPE_SYMBOL:\n                        set((hydrated[index] = Symbol.for(b)));\n                        continue;\n                    case utils_js_1.TYPE_SET:\n                        const newSet = new Set();\n                        hydrated[index] = newSet;\n                        for (let i = 1; i < value.length; i++)\n                            stack.push([\n                                value[i],\n                                (v) => {\n                                    newSet.add(v);\n                                },\n                            ]);\n                        set(newSet);\n                        continue;\n                    case utils_js_1.TYPE_MAP:\n                        const map = new Map();\n                        hydrated[index] = map;\n                        for (let i = 1; i < value.length; i += 2) {\n                            const r = [];\n                            stack.push([\n                                value[i + 1],\n                                (v) => {\n                                    r[1] = v;\n                                },\n                            ]);\n                            stack.push([\n                                value[i],\n                                (k) => {\n                                    r[0] = k;\n                                },\n                            ]);\n                            postRun.push(() => {\n                                map.set(r[0], r[1]);\n                            });\n                        }\n                        set(map);\n                        continue;\n                    case utils_js_1.TYPE_NULL_OBJECT:\n                        const obj = Object.create(null);\n                        hydrated[index] = obj;\n                        for (const key of Object.keys(b).reverse()) {\n                            const r = [];\n                            stack.push([\n                                b[key],\n                                (v) => {\n                                    r[1] = v;\n                                },\n                            ]);\n                            stack.push([\n                                Number(key.slice(1)),\n                                (k) => {\n                                    r[0] = k;\n                                },\n                            ]);\n                            postRun.push(() => {\n                                obj[r[0]] = r[1];\n                            });\n                        }\n                        set(obj);\n                        continue;\n                    case utils_js_1.TYPE_PROMISE:\n                        if (hydrated[b]) {\n                            set((hydrated[index] = hydrated[b]));\n                        }\n                        else {\n                            const d = new utils_js_1.Deferred();\n                            deferred[b] = d;\n                            set((hydrated[index] = d.promise));\n                        }\n                        continue;\n                    case utils_js_1.TYPE_ERROR:\n                        const [, message, errorType] = value;\n                        let error = errorType && globalObj && globalObj[errorType]\n                            ? new globalObj[errorType](message)\n                            : new Error(message);\n                        hydrated[index] = error;\n                        set(error);\n                        continue;\n                    case utils_js_1.TYPE_PREVIOUS_RESOLVED:\n                        set((hydrated[index] = hydrated[b]));\n                        continue;\n                    default:\n                        // Run plugins at the end so we have a chance to resolve primitives\n                        // without running into a loop\n                        if (Array.isArray(plugins)) {\n                            const r = [];\n                            const vals = value.slice(1);\n                            for (let i = 0; i < vals.length; i++) {\n                                const v = vals[i];\n                                stack.push([\n                                    v,\n                                    (v) => {\n                                        r[i] = v;\n                                    },\n                                ]);\n                            }\n                            postRun.push(() => {\n                                for (const plugin of plugins) {\n                                    const result = plugin(value[0], ...r);\n                                    if (result) {\n                                        set((hydrated[index] = result.value));\n                                        return;\n                                    }\n                                }\n                                throw new SyntaxError();\n                            });\n                            continue;\n                        }\n                        throw new SyntaxError();\n                }\n            }\n            else {\n                const array = [];\n                hydrated[index] = array;\n                for (let i = 0; i < value.length; i++) {\n                    const n = value[i];\n                    if (n !== utils_js_1.HOLE) {\n                        stack.push([\n                            n,\n                            (v) => {\n                                array[i] = v;\n                            },\n                        ]);\n                    }\n                }\n                set(array);\n                continue;\n            }\n        }\n        else {\n            const object = {};\n            hydrated[index] = object;\n            for (const key of Object.keys(value).reverse()) {\n                const r = [];\n                stack.push([\n                    value[key],\n                    (v) => {\n                        r[1] = v;\n                    },\n                ]);\n                stack.push([\n                    Number(key.slice(1)),\n                    (k) => {\n                        r[0] = k;\n                    },\n                ]);\n                postRun.push(() => {\n                    object[r[0]] = r[1];\n                });\n            }\n            set(object);\n            continue;\n        }\n    }\n    while (postRun.length > 0) {\n        postRun.pop()();\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/turbo-stream/dist/unflatten.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/turbo-stream/dist/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/turbo-stream/dist/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createLineSplittingTransform = exports.Deferred = exports.TYPE_PREVIOUS_RESOLVED = exports.TYPE_URL = exports.TYPE_SYMBOL = exports.TYPE_SET = exports.TYPE_REGEXP = exports.TYPE_PROMISE = exports.TYPE_NULL_OBJECT = exports.TYPE_MAP = exports.TYPE_ERROR = exports.TYPE_DATE = exports.TYPE_BIGINT = exports.UNDEFINED = exports.POSITIVE_INFINITY = exports.NULL = exports.NEGATIVE_ZERO = exports.NEGATIVE_INFINITY = exports.NAN = exports.HOLE = void 0;\nexports.HOLE = -1;\nexports.NAN = -2;\nexports.NEGATIVE_INFINITY = -3;\nexports.NEGATIVE_ZERO = -4;\nexports.NULL = -5;\nexports.POSITIVE_INFINITY = -6;\nexports.UNDEFINED = -7;\nexports.TYPE_BIGINT = \"B\";\nexports.TYPE_DATE = \"D\";\nexports.TYPE_ERROR = \"E\";\nexports.TYPE_MAP = \"M\";\nexports.TYPE_NULL_OBJECT = \"N\";\nexports.TYPE_PROMISE = \"P\";\nexports.TYPE_REGEXP = \"R\";\nexports.TYPE_SET = \"S\";\nexports.TYPE_SYMBOL = \"Y\";\nexports.TYPE_URL = \"U\";\nexports.TYPE_PREVIOUS_RESOLVED = \"Z\";\nclass Deferred {\n    promise;\n    resolve;\n    reject;\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexports.Deferred = Deferred;\nfunction createLineSplittingTransform() {\n    const decoder = new TextDecoder();\n    let leftover = \"\";\n    return new TransformStream({\n        transform(chunk, controller) {\n            const str = decoder.decode(chunk, { stream: true });\n            const parts = (leftover + str).split(\"\\n\");\n            // The last part might be a partial line, so keep it for the next chunk.\n            leftover = parts.pop() || \"\";\n            for (const part of parts) {\n                controller.enqueue(part);\n            }\n        },\n        flush(controller) {\n            // If there's any leftover data, enqueue it before closing.\n            if (leftover) {\n                controller.enqueue(leftover);\n            }\n        },\n    });\n}\nexports.createLineSplittingTransform = createLineSplittingTransform;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHVyYm8tc3RyZWFtL2Rpc3QvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0NBQW9DLEdBQUcsZ0JBQWdCLEdBQUcsOEJBQThCLEdBQUcsZ0JBQWdCLEdBQUcsbUJBQW1CLEdBQUcsZ0JBQWdCLEdBQUcsbUJBQW1CLEdBQUcsb0JBQW9CLEdBQUcsd0JBQXdCLEdBQUcsZ0JBQWdCLEdBQUcsa0JBQWtCLEdBQUcsaUJBQWlCLEdBQUcsbUJBQW1CLEdBQUcsaUJBQWlCLEdBQUcseUJBQXlCLEdBQUcsWUFBWSxHQUFHLHFCQUFxQixHQUFHLHlCQUF5QixHQUFHLFdBQVcsR0FBRyxZQUFZO0FBQzliLFlBQVk7QUFDWixXQUFXO0FBQ1gseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQixZQUFZO0FBQ1oseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQixtQkFBbUI7QUFDbkIsaUJBQWlCO0FBQ2pCLGtCQUFrQjtBQUNsQixnQkFBZ0I7QUFDaEIsd0JBQXdCO0FBQ3hCLG9CQUFvQjtBQUNwQixtQkFBbUI7QUFDbkIsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixnQkFBZ0I7QUFDaEIsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGNBQWM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy90dXJiby1zdHJlYW0vZGlzdC91dGlscy5qcz80MDQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVMaW5lU3BsaXR0aW5nVHJhbnNmb3JtID0gZXhwb3J0cy5EZWZlcnJlZCA9IGV4cG9ydHMuVFlQRV9QUkVWSU9VU19SRVNPTFZFRCA9IGV4cG9ydHMuVFlQRV9VUkwgPSBleHBvcnRzLlRZUEVfU1lNQk9MID0gZXhwb3J0cy5UWVBFX1NFVCA9IGV4cG9ydHMuVFlQRV9SRUdFWFAgPSBleHBvcnRzLlRZUEVfUFJPTUlTRSA9IGV4cG9ydHMuVFlQRV9OVUxMX09CSkVDVCA9IGV4cG9ydHMuVFlQRV9NQVAgPSBleHBvcnRzLlRZUEVfRVJST1IgPSBleHBvcnRzLlRZUEVfREFURSA9IGV4cG9ydHMuVFlQRV9CSUdJTlQgPSBleHBvcnRzLlVOREVGSU5FRCA9IGV4cG9ydHMuUE9TSVRJVkVfSU5GSU5JVFkgPSBleHBvcnRzLk5VTEwgPSBleHBvcnRzLk5FR0FUSVZFX1pFUk8gPSBleHBvcnRzLk5FR0FUSVZFX0lORklOSVRZID0gZXhwb3J0cy5OQU4gPSBleHBvcnRzLkhPTEUgPSB2b2lkIDA7XG5leHBvcnRzLkhPTEUgPSAtMTtcbmV4cG9ydHMuTkFOID0gLTI7XG5leHBvcnRzLk5FR0FUSVZFX0lORklOSVRZID0gLTM7XG5leHBvcnRzLk5FR0FUSVZFX1pFUk8gPSAtNDtcbmV4cG9ydHMuTlVMTCA9IC01O1xuZXhwb3J0cy5QT1NJVElWRV9JTkZJTklUWSA9IC02O1xuZXhwb3J0cy5VTkRFRklORUQgPSAtNztcbmV4cG9ydHMuVFlQRV9CSUdJTlQgPSBcIkJcIjtcbmV4cG9ydHMuVFlQRV9EQVRFID0gXCJEXCI7XG5leHBvcnRzLlRZUEVfRVJST1IgPSBcIkVcIjtcbmV4cG9ydHMuVFlQRV9NQVAgPSBcIk1cIjtcbmV4cG9ydHMuVFlQRV9OVUxMX09CSkVDVCA9IFwiTlwiO1xuZXhwb3J0cy5UWVBFX1BST01JU0UgPSBcIlBcIjtcbmV4cG9ydHMuVFlQRV9SRUdFWFAgPSBcIlJcIjtcbmV4cG9ydHMuVFlQRV9TRVQgPSBcIlNcIjtcbmV4cG9ydHMuVFlQRV9TWU1CT0wgPSBcIllcIjtcbmV4cG9ydHMuVFlQRV9VUkwgPSBcIlVcIjtcbmV4cG9ydHMuVFlQRV9QUkVWSU9VU19SRVNPTFZFRCA9IFwiWlwiO1xuY2xhc3MgRGVmZXJyZWQge1xuICAgIHByb21pc2U7XG4gICAgcmVzb2x2ZTtcbiAgICByZWplY3Q7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5EZWZlcnJlZCA9IERlZmVycmVkO1xuZnVuY3Rpb24gY3JlYXRlTGluZVNwbGl0dGluZ1RyYW5zZm9ybSgpIHtcbiAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG4gICAgbGV0IGxlZnRvdmVyID0gXCJcIjtcbiAgICByZXR1cm4gbmV3IFRyYW5zZm9ybVN0cmVhbSh7XG4gICAgICAgIHRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcikge1xuICAgICAgICAgICAgY29uc3Qgc3RyID0gZGVjb2Rlci5kZWNvZGUoY2h1bmssIHsgc3RyZWFtOiB0cnVlIH0pO1xuICAgICAgICAgICAgY29uc3QgcGFydHMgPSAobGVmdG92ZXIgKyBzdHIpLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICAgICAgLy8gVGhlIGxhc3QgcGFydCBtaWdodCBiZSBhIHBhcnRpYWwgbGluZSwgc28ga2VlcCBpdCBmb3IgdGhlIG5leHQgY2h1bmsuXG4gICAgICAgICAgICBsZWZ0b3ZlciA9IHBhcnRzLnBvcCgpIHx8IFwiXCI7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUocGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZsdXNoKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYW55IGxlZnRvdmVyIGRhdGEsIGVucXVldWUgaXQgYmVmb3JlIGNsb3NpbmcuXG4gICAgICAgICAgICBpZiAobGVmdG92ZXIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUobGVmdG92ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xufVxuZXhwb3J0cy5jcmVhdGVMaW5lU3BsaXR0aW5nVHJhbnNmb3JtID0gY3JlYXRlTGluZVNwbGl0dGluZ1RyYW5zZm9ybTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/turbo-stream/dist/utils.js\n");

/***/ })

};
;